<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-12-10T18:42:33+09:00</updated><id>http://localhost:4000/</id><entry><title type="html">BOJ 14891 톱니바퀴</title><link href="http://localhost:4000/posts/2017/12/10/BOJ14891.html" rel="alternate" type="text/html" title="BOJ 14891 톱니바퀴" /><published>2017-12-10T09:37:00+09:00</published><updated>2017-12-10T09:37:00+09:00</updated><id>http://localhost:4000/posts/2017/12/10/BOJ14891</id><content type="html" xml:base="http://localhost:4000/posts/2017/12/10/BOJ14891.html">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/14891&quot;&gt;문제&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;
총 8개의 톱니를 가지고 있는 톱니바퀴 4개가 아래 그림과 같이 일렬로 놓여져 있다. 또, 톱니는 N극 또는 S극 중 하나를 나타내고 있다. 톱니바퀴에는 번호가 매겨져 있는데, 가장 왼쪽 톱니바퀴가 1번, 그 오른쪽은 2번, 그 오른쪽은 3번, 가장 오른쪽 톱니바퀴는 4번이다.&lt;/p&gt;

&lt;p&gt;이 때, 톱니바퀴를 총 K번 회전시키려고 한다. 톱니바퀴의 회전은 한 칸을 기준으로 한다. 회전은 시계 방향과 반시계 방향이 있고, 아래 그림과 같이 회전한다.&lt;/p&gt;

&lt;p&gt;톱니바퀴를 회전시키려면, 회전시킬 톱니바퀴와 회전시킬 방향을 결정해야 한다. 톱니바퀴가 회전할 때, 서로 맞닿은 극에 따라서 옆에 있는 톱니바퀴를 회전시킬 수도 있고, 회전시키지 않을 수도 있다. 톱니바퀴 A를 회전할 때, 그 옆에 있는 톱니바퀴 B와 서로 맞닿은 톱니의 극이 다르다면, B는 A가 회전한 방향과 반대방향으로 회전하게 된다. 예를 들어, 아래와 같은 경우를 살펴보자.&lt;/p&gt;

&lt;p&gt;두 톱니바퀴의 맞닿은 부분은 초록색 점선으로 묶여있는 부분이다. 여기서, 3번 톱니바퀴를 반시계 방향으로 회전했다면, 4번 톱니바퀴는 시계 방향으로 회전하게 된다. 2번 톱니바퀴는 맞닿은 부분이 S극으로 서로 같기 때문에, 회전하지 않게 되고, 1번 톱니바퀴는 2번이 회전하지 않았기 때문에, 회전하지 않게 된다. 따라서, 아래 그림과 같은 모양을 만들게 된다.&lt;/p&gt;

&lt;p&gt;위와 같은 상태에서 1번 톱니바퀴를 시계 방향으로 회전시키면, 2번 톱니바퀴가 반시계 방향으로 회전하게 되고, 2번이 회전하기 때문에, 3번도 동시에 시계 방향으로 회전하게 된다. 4번은 3번이 회전하지만, 맞닿은 극이 같기 때문에 회전하지 않는다. 따라서, 아래와 같은 상태가 된다.&lt;/p&gt;

&lt;p&gt;톱니바퀴의 초기 상태와 톱니바퀴를 회전시킨 방법이 주어졌을 때, 최종 톱니바퀴의 상태를 구하는 프로그램을 작성하시오.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;입력&quot;&gt;입력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
첫째 줄에 1번 톱니바퀴의 상태, 둘째 줄에 2번 톱니바퀴의 상태, 셋째 줄에 3번 톱니바퀴의 상태, 넷째 줄에 4번 톱니바퀴의 상태가 주어진다. 상태는 8개의 정수로 이루어져 있고, 12시방향부터 시계방향 순서대로 주어진다. N극은 0, S극은 1로 나타나있다.&lt;/p&gt;

&lt;p&gt;다섯째 줄에는 회전 횟수 K(1 ≤ K ≤ 100)가 주어진다. 다음 K개 줄에는 회전시킨 방법이 순서대로 주어진다. 각 방법은 두 개의 정수로 이루어져 있고, 첫 번째 정수는 회전시킨 톱니바퀴의 번호, 두 번째 정수는 방향이다. 방향이 1인 경우는 시계 방향이고, -1인 경우는 반시계 방향이다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;출력&quot;&gt;출력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;총 K번 회전시킨 이후에 네 톱니바퀴의 점수의 합을 출력한다. 점수란 다음과 같이 계산한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1번 톱니바퀴의 12시방향이 N극이면 0점, S극이면 1점
2번 톱니바퀴의 12시방향이 N극이면 0점, S극이면 2점
3번 톱니바퀴의 12시방향이 N극이면 0점, S극이면 4점
4번 톱니바퀴의 12시방향이 N극이면 0점, S극이면 8점
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;엄청 쉬워보였지만 생각보다 복잡했다. 톱니바퀴를 생각했을 때, 가장 처음 Circular Queue가 생각났고, top_cogwheel[4]를 통해 각 톱니바퀴가 12시 방향이 가르키는 위치에 대한 index값을 저장시켰다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DFS를 이용하여, 각 회전 케이스마다 움직이도록 실행했고, 인근 톱니바퀴를 모두 확인한 이후에야 움직일 톱니바퀴를 회전시켰다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;회전은 데이터를 움직이는 것이 아닌 top_cogwheel[4]가 가리키는 위치를 바꿨다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;종이에 적으면서 하지 않아서 멍청하게 회전 방향때문에 복잡했다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;코드&quot;&gt;코드&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
using namespace std;

int cogwheel[4][8];
int top_cogwheel[4];
int visited[4];


void init_visited(){
  for(int i=0; i&amp;lt;4;i++) visited[i]=0;
}
// direction is 1인 경우는 시계 방향이고, -1인 경우는 반시계 방향
void spin(int wheel_num,int direction){
  if(direction==1 &amp;amp;&amp;amp; top_cogwheel[wheel_num]==0){	
      top_cogwheel[wheel_num] +=  8;
  }
  top_cogwheel[wheel_num] = (top_cogwheel[wheel_num]+(direction*(-1))) % 8;
}

void spin_with(int wheel_num,int direction){


  visited[wheel_num]=1;

  if(wheel_num + 1 &amp;lt; 4){
    if(visited[wheel_num + 1] == 0 &amp;amp;&amp;amp;  cogwheel[wheel_num][(top_cogwheel[wheel_num]+2)%8] != cogwheel[wheel_num+1][(top_cogwheel[wheel_num+1]+6)%8] ){
      spin_with(wheel_num +1 ,(direction*(-1)));
    }
  }
  if(wheel_num - 1 &amp;gt;= 0){
    if( visited[wheel_num - 1] == 0 &amp;amp;&amp;amp; cogwheel[wheel_num][(top_cogwheel[wheel_num]+6)%8] != cogwheel[wheel_num-1][(top_cogwheel[wheel_num-1]+2)%8]){
      spin_with(wheel_num - 1,(direction*(-1)));
    }
  }

  spin(wheel_num,direction);
}

int main(){

  for(int i=0;i&amp;lt;4;i++){
	  string temp;
	  cin &amp;gt;&amp;gt; temp;
	  int temp_length = temp.length();
	  for(int j=0;j&amp;lt;temp_length;j++)
		  cogwheel[i][j] = temp.at(j) - '0';
	
		top_cogwheel[i]=0;
  }

  int spin_case;

  cin &amp;gt;&amp;gt; spin_case;

  for(int i = 0 ;i&amp;lt; spin_case;i++){
    int temp_wheel_num;
    int temp_direction;

	cin &amp;gt;&amp;gt; temp_wheel_num;
	cin &amp;gt;&amp;gt; temp_direction;

    spin_with(temp_wheel_num-1,temp_direction);
    init_visited();
  }

  int result_score=0;

  for(int i=0;i&amp;lt;4;i++){
    int temp = 1;
    for(int j=0;j&amp;lt;i;j++) temp *= 2;

	if (cogwheel[i][top_cogwheel[i]] == 1) {

		result_score += temp;

	}
  }

  cout&amp;lt;&amp;lt; result_score;

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">문제</summary></entry><entry><title type="html">BOJ 10808 알파벳 개수</title><link href="http://localhost:4000/posts/2017/12/08/BOJ10808.html" rel="alternate" type="text/html" title="BOJ 10808 알파벳 개수" /><published>2017-12-08T09:04:00+09:00</published><updated>2017-12-08T09:04:00+09:00</updated><id>http://localhost:4000/posts/2017/12/08/BOJ10808</id><content type="html" xml:base="http://localhost:4000/posts/2017/12/08/BOJ10808.html">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/10808&quot;&gt;문제&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;
알파벳 소문자로만 이루어진 단어 S가 주어진다. 이 때, 각 알파벳이 단어에 몇 개가 포함되어 있는지 구하는 프로그램을 작성하시오.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;입력&quot;&gt;입력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
첫째 줄에 단어 S가 주어진다. 단어의 길이는 100을 넘지 않으며, 알파벳 소문자로만 이루어져 있다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;출력&quot;&gt;출력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
단어에 포함되어 있는 a의 개수, b의 개수, …, z의 개수를 공백으로 구분해서 출력한다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;간단하다. 소문자만 되니까 그것을 이용해서 배열을 만들어서 하면 해결한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;배열의 범위를 아스키코드의 숫자로 하지말구 - ‘a’를 하여서 0~25의 배열 위치에 각 값을 위치시키면 공간에 대한 절약도 할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;코드&quot;&gt;코드&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;

using namespace std;

int alphabet[26];

int main() {
	string input_string;
	cin &amp;gt;&amp;gt; input_string;
	int input_string_length = input_string.length();
	for (int i = 0; i &amp;lt; input_string_length; i++) {
		alphabet[input_string.at(i) - 'a']++;
	}

	for (int i = 0; i &amp;lt; 26; i++)
	{
		cout &amp;lt;&amp;lt; alphabet[i];
		if (i != 25) cout &amp;lt;&amp;lt; &quot; &quot;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">문제</summary></entry><entry><title type="html">BOJ 14500 테트로미노</title><link href="http://localhost:4000/posts/2017/12/07/BOJ14500.html" rel="alternate" type="text/html" title="BOJ 14500 테트로미노" /><published>2017-12-07T22:24:00+09:00</published><updated>2017-12-07T22:24:00+09:00</updated><id>http://localhost:4000/posts/2017/12/07/BOJ14500</id><content type="html" xml:base="http://localhost:4000/posts/2017/12/07/BOJ14500.html">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/14500&quot;&gt;문제&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;
폴리오미노란 크기가 1×1인 정사각형을 여러 개 이어서 붙인 도형이며, 다음과 같은 조건을 만족해야 한다.&lt;/p&gt;

&lt;p&gt;정사각형은 서로 겹치면 안된다.
도형은 모두 연결되어 있어야 한다.
정사각형의 꼭지점끼리 연결되어 있어야 한다. 즉, 변과 꼭지점이 맞닿아있으면 안된다.
정사각형 4개를 이어 붙인 폴리오미노는 테트로미노라고 하며, 다음과 같은 5가지가 있다.&lt;/p&gt;

&lt;p&gt;아름이는 크기가 N×M인 종이 위에 테트로미노 하나를 놓으려고 한다. 종이는 1×1 크기의 칸으로 나누어져 있으며, 각각의 칸에는 정수가 하나 써 있다.&lt;/p&gt;

&lt;p&gt;테트로미노 하나를 적절히 놓아서 테트로미노가 놓인 칸에 쓰여 있는 수들의 합을 최대로 하는 프로그램을 작성하시오.&lt;/p&gt;

&lt;p&gt;테트로미노는 반드시 한 정사각형이 정확히 하나의 칸을 포함하도록 놓아야 하며, 회전이나 대칭을 시켜도 된다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;입력&quot;&gt;입력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
첫째 줄에 종이의 세로 크기 N과 가로 크기 M이 주어진다. (4 ≤ N, M ≤ 500)&lt;/p&gt;

&lt;p&gt;둘째 줄부터 N개의 줄에 종이에 써 있는 수가 주어진다. i번째 줄의 j번째 수는 위에서부터 i번째 칸, 왼쪽에서부터 j번째 칸에 써 있는 수이다. 입력으로 주어지는 수는 1,000을 넘지 않는 자연수이다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;출력&quot;&gt;출력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
첫째 줄에 테트로미노가 놓인 칸에 쓰인 수들의 합의 최댓값을 출력한다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;너무나 당연스럽게 DFS가 생각이 났고, 실행에 옮기게 되었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;특이사항시에 백트래킹을 쓰지않으면 “ㅗ” 의 대칭 및 회전 모양을 표현할 수 없었고 백트래킹으로 구현할까 했지만 편하게 그 상황들에 대해서 따로 처리하였다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그리고 더 효율적인 방법이 있겠지만, N,M이 500 밖에 되지 않으므로 무식한 방법으로 하게 되었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;처음에는는 멍청하게 BFS로 접근해서 한참 해멨었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;풀면서 느낀 거지만 번거로워도 무식하게 19개정도 되는 케이스를 다 확인하는 것이 가장 빠를지도 모르겠다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;코드&quot;&gt;코드&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;

using namespace std;

int n,m;
int tetromino_data[501][501];
int visited[501][501];
int moved[4][2]={ { -1,0},{1,0},{0,1},{0,-1}}; //왼오위아래
int special_move[4][3][2]={ { {-1,0},{1,0},{0,1}},{ {1,0},{-1,0},{0,-1}},{ {0,1},{0,-1},{1,0}},{ {0,1},{0,-1},{-1,0}}};

int DFS(int x,int y,int counts){

  if(counts==3) return tetromino_data[x][y];

  int DFS_maxnum = 0;

  visited[x][y] = 1;
  if(counts == 0){
    for(int i=0;i&amp;lt;4;i++){
      int temp=0;
      int flags=0;
      for(int j=0;j&amp;lt;3;j++){
        if(x+special_move[i][j][0] &amp;gt;=0 &amp;amp;&amp;amp; x+special_move[i][j][0] &amp;lt; n &amp;amp;&amp;amp; y+special_move[i][j][1] &amp;gt;=0 &amp;amp;&amp;amp; special_move[i][j][1] &amp;lt; m){
          flags++;
          temp+=tetromino_data[x+special_move[i][j][0]][y+special_move[i][j][1]];
        }
      }
      if(flags==3) DFS_maxnum = max(DFS_maxnum,temp);
    }
  }

  for(int i=0;i&amp;lt;3;i++){
    if(x+moved[i][0]&amp;gt;=0 &amp;amp;&amp;amp; x+moved[i][0] &amp;lt; n &amp;amp;&amp;amp; y+moved[i][1] &amp;gt;=0 &amp;amp;&amp;amp; y+moved[i][1] &amp;lt; m)
    {
		if(visited[x + moved[i][0]][y + moved[i][1]] == 0)
			DFS_maxnum = max(DFS_maxnum,DFS(x+moved[i][0],y+moved[i][1],counts+1));
    }
  }

  visited[x][y] = 0;
  return DFS_maxnum + tetromino_data[x][y];
}
int main() {
  cin&amp;gt;&amp;gt; n &amp;gt;&amp;gt;m;
  for(int i=0;i&amp;lt;n;i++)
    for(int j =0;j&amp;lt;m;j++)
      cin&amp;gt;&amp;gt;tetromino_data[i][j];

    int max_num=0;

  for(int i=0;i&amp;lt;n;i++)
    for(int j =0;j&amp;lt;m;j++)
      max_num=max(max_num,DFS(i,j,0));

  cout&amp;lt;&amp;lt;max_num;

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">문제</summary></entry><entry><title type="html">BOJ 1152 단어의 개수</title><link href="http://localhost:4000/posts/2017/12/05/BOJ1152.html" rel="alternate" type="text/html" title="BOJ 1152 단어의 개수" /><published>2017-12-05T06:20:00+09:00</published><updated>2017-12-05T06:20:00+09:00</updated><id>http://localhost:4000/posts/2017/12/05/BOJ1152</id><content type="html" xml:base="http://localhost:4000/posts/2017/12/05/BOJ1152.html">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1152&quot;&gt;문제&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;
영어 대소문자와 띄어쓰기만으로 이루어진 문장이 주어진다. 이 문장에는 몇 개의 단어가 있을까? 이를 구하는 프로그램을 작성하시오.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;입력&quot;&gt;입력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
첫 줄에 영어 대소문자와 띄어쓰기로 이루어진 문장이 주어진다. 이 문장의 길이는 1,000,000을 넘지 않는다. 단어는 띄어쓰기 한 개로 구분된다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;출력&quot;&gt;출력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
첫째 줄에 단어의 개수를 출력한다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;단순히 getline을 통해 한줄을 스트링으로 받고 at() 함수를 통해 모든 위치의 공백의 개수를 카운트 했다. 그리고 맨 앞과 맨 뒤가 공백일 경우에 대한 경우를 제외했다. 이는 문장의 길이가 1,000,000이 넘지 않기 때문에 가능했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;처음엔 string의 find 함수를 통해서 단어를 끊어가면서 하였지만, 시간초과가 발생하였다. 그 이유는 while문에서 무한 루프가 발생할 것이라구 생각해본다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;
	while (input_string.find(&quot; &quot;)!= string::npos) {
		int location = input_string.find(&quot; &quot;);
		counts++;
		temp_string = input_string.substr(location+1, len_string-1);
		len_string = len_string - location -1;
		input_string = temp_string;
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;코드&quot;&gt;코드&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
using namespace std;

int main() {
	string input_string;
	getline(cin,input_string);
	int counts = 1;
	int len_string = input_string.length();

	for (int i = 0; i &amp;lt; len_string; i++) {
		if (input_string.at(i) == ' ') counts++;
	}

	if (input_string.at(0) == ' ')counts--;
	if (input_string.at(len_string-1) == ' ')counts--;

	cout &amp;lt;&amp;lt; counts;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">문제</summary></entry><entry><title type="html">BOJ 14502 연구소</title><link href="http://localhost:4000/posts/2017/12/03/BOJ14502.html" rel="alternate" type="text/html" title="BOJ 14502 연구소" /><published>2017-12-03T14:38:00+09:00</published><updated>2017-12-03T14:38:00+09:00</updated><id>http://localhost:4000/posts/2017/12/03/BOJ14502</id><content type="html" xml:base="http://localhost:4000/posts/2017/12/03/BOJ14502.html">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/14502&quot;&gt;문제&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;
인체에 치명적인 바이러스를 연구하던 연구소에서 바이러스가 유출되었다. 다행히 바이러스는 아직 퍼지지 않았고, 바이러스의 확산을 막기 위해서 연구소에 벽을 세우려고 한다.&lt;/p&gt;

&lt;p&gt;연구소는 크기가 N×M인 직사각형으로 나타낼 수 있으며, 직사각형은 1×1 크기의 정사각형으로 나누어져 있다. 연구소는 빈 칸, 벽으로 이루어져 있으며, 벽은 칸 하나를 가득 차지한다.&lt;/p&gt;

&lt;p&gt;일부 칸은 바이러스가 존재하며, 이 바이러스는 인접한 빈 칸으로 모두 퍼져나갈 수 있다. 새로 세울 수 있는 벽의 개수는 3개이며, 꼭 3개를 세워야 한다.&lt;/p&gt;

&lt;p&gt;예를 들어, 아래와 같이 연구소가 생긴 경우를 살펴보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2 0 0 0 1 1 0
0 0 1 0 1 2 0
0 1 1 0 1 0 0
0 1 0 0 0 0 0
0 0 0 0 0 1 1
0 1 0 0 0 0 0
0 1 0 0 0 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 때, 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 곳이다. 아무런 벽을 세우지 않는다면, 바이러스는 모든 빈 칸으로 퍼져나갈 수 있다.&lt;/p&gt;

&lt;p&gt;2행 1열, 1행 2열, 4행 6열에 벽을 세운다면 지도의 모양은 아래와 같아지게 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2 1 0 0 1 1 0
1 0 1 0 1 2 0
0 1 1 0 1 0 0
0 1 0 0 0 1 0
0 0 0 0 0 1 1
0 1 0 0 0 0 0
0 1 0 0 0 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;바이러스가 퍼진 뒤의 모습은 아래와 같아진다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2 1 0 0 1 1 2
1 0 1 0 1 2 2
0 1 1 0 1 2 2
0 1 0 0 0 1 2
0 0 0 0 0 1 1
0 1 0 0 0 0 0
0 1 0 0 0 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;벽을 3개 세운 뒤, 바이러스가 퍼질 수 없는 곳을 안전 영역이라고 한다. 위의 지도에서 안전 영역의 크기는 27이다.&lt;/p&gt;

&lt;p&gt;연구소의 지도가 주어졌을 때 얻을 수 있는 안전 영역 크기의 최대값을 구하는 프로그램을 작성하시오.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;입력&quot;&gt;입력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
첫째 줄에 지도의 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 8)&lt;/p&gt;

&lt;p&gt;둘째 줄부터 N개의 줄에 지도의 모양이 주어진다. 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 위치이다. 2의 개수는 2보다 크거나 같고, 10보다 작거나 같은 자연수이다.&lt;/p&gt;

&lt;p&gt;빈 칸의 개수는 3개 이상이다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;출력&quot;&gt;출력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
첫째 줄에 얻을 수 있는 안전 영역의 최대 크기를 출력한다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;규칙도 방법도 찾을 수 없다. 있다하더라도 상당히 어려울 것으로 보인다. 따라서 모든 케이스를 다 해보는 완전 탐색을 생각했습니다. 이때 시간 복잡도는 최악일 경우에 (n^2)C3 * n^2 * x 로 O(n^8)으로 생각하였고,  (n&amp;lt;=8)이기에 1초가 걸리지 않는다고 생각했습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;구현을 어떻게 하면 좋을 지가 좀 포인트라고 생각합니다. 저는 매 경우마다 virus_map을 초기 데이터 상태로 시작하는 것으로 처리하였고, 또한 visited를 사용하지 않고, 바이러스가 발생한 곳들을 3으로 대입 하였습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;바이러스가 감염되는 것에 대해서는 BFS를 구현하였습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아쉬운 점이 있다면, 멍청하게 x&lt;em&gt;10+y로 저장하고 x/10 와 y/10 를 통해 복구하였는 데 n이 8이기 때문에 크기가 64&lt;/em&gt;2인 이차원 배열을 만들어서 사용하면 더 빠른 속도로 할 수 있을거라고 생각합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;코드&quot;&gt;코드&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;deque&amp;gt;
#include &amp;lt;algorithm&amp;gt;
using namespace std;

int n, m;
int virus_data[8][8];
int virus_map[8][8];
int move_[4][2] = { {1,0}, {-1,0}, {0,1}, {0,-1} };


void init_map() {
	for (int i = 0; i &amp;lt; n; i++) 
		for (int j = 0; j &amp;lt; m; j++)
			virus_map[i][j] = virus_data[i][j];
}

void bfs(int x,int y) {
	deque&amp;lt;int&amp;gt; bfsque;
	virus_map[x][y] = 3;
	bfsque.push_back(10*x+y);

	while(!bfsque.empty()) {
		int i = bfsque.front() / 10;
		int j = bfsque.front() % 10;
		bfsque.pop_front();
		for (int k = 0; k &amp;lt; 4; k++) {
			int x_ = i + move_[k][0];
			int y_ = j + move_[k][1];

			if (x_ &amp;gt;= 0 &amp;amp;&amp;amp; x_ &amp;lt; n &amp;amp;&amp;amp; y_ &amp;gt;= 0 &amp;amp;&amp;amp; y_ &amp;lt; m) {
				if (virus_map[x_][y_] == 0 || virus_map[x_][y_] == 2)
				{
					bfsque.push_back(x_ * 10 + y_);
					virus_map[x_][y_] = 3;
				}
			}
		}
	}

}

int safety_zone(){
	for (int i = 0; i &amp;lt; n; i++) {
		for (int j = 0; j &amp;lt; m; j++) {
			if (virus_map[i][j] == 2)
				bfs(i, j);
		}
	}
	int count_zero=0;
	for (int i = 0; i &amp;lt; n; i++) {
		for (int j = 0; j &amp;lt; m; j++) {
			if (virus_map[i][j] == 0) count_zero++;
		}
	}

	return count_zero;
}


int main() {

	cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
	vector&amp;lt;int&amp;gt; location_zero;
	for (int i = 0; i &amp;lt; n; i++) {
		for (int j = 0; j &amp;lt; m; j++) {
			cin &amp;gt;&amp;gt; virus_data[i][j];
			if (virus_data[i][j] == 0) location_zero.push_back(i * 10 + j);
		}
	}
	int result = 0;
	int length_zero = location_zero.size();
	int data_temp[3][2] = { {0,0},{0,0},{0,0} };
	for (int i = 0; i &amp;lt; length_zero - 2; i++) {
		data_temp[0][0] = location_zero.at(i) / 10;
		data_temp[0][1] = location_zero.at(i) % 10;
		for (int j = i+1; j &amp;lt; length_zero - 1; j++) {
			data_temp[1][0] = location_zero.at(j) / 10;
			data_temp[1][1] = location_zero.at(j) % 10;
			for (int k = j+1; k &amp;lt; length_zero; k++) {
				data_temp[2][0] = location_zero.at(k) / 10;
				data_temp[2][1] = location_zero.at(k) % 10;
				init_map();
				for (int z = 0; z &amp;lt; 3; z++)
					virus_map[data_temp[z][0]][data_temp[z][1]] = 1;
				result = max(safety_zone(), result);
			}
		}
	}

	cout &amp;lt;&amp;lt; result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">문제</summary></entry><entry><title type="html">BOJ 1003 피보나치 함수</title><link href="http://localhost:4000/posts/2017/12/01/BOJ1003.html" rel="alternate" type="text/html" title="BOJ 1003 피보나치 함수" /><published>2017-12-01T12:20:00+09:00</published><updated>2017-12-01T12:20:00+09:00</updated><id>http://localhost:4000/posts/2017/12/01/BOJ1003</id><content type="html" xml:base="http://localhost:4000/posts/2017/12/01/BOJ1003.html">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1003&quot;&gt;문제&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;
다음 소스는 N번째 피보나치 함수를 구하는 함수이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int fibonacci(int n) {
    if (n==0) {
        printf(&quot;0&quot;);
        return 0;
    } else if (n==1) {
        printf(&quot;1&quot;);
        return 1;
    } else {
        return fibonacci(n‐1) + fibonacci(n‐2);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;fibonacci(3)을 호출하면 다음과 같은 일이 일어난다.&lt;/p&gt;

&lt;p&gt;fibonacci(3)은 fibonacci(2)와 fibonacci(1) (첫 번째 호출)을 호출한다.&lt;/p&gt;

&lt;p&gt;fibonacci(2)는 fibonacci(1) (두 번째 호출)과 fibonacci(0)을 호출한다.&lt;/p&gt;

&lt;p&gt;두 번째 호출한 fibonacci(1)은 1을 출력하고 1을 리턴한다.&lt;/p&gt;

&lt;p&gt;fibonacci(0)은 0을 출력하고, 0을 리턴한다.&lt;/p&gt;

&lt;p&gt;fibonacci(2)는 fibonacci(1)과 fibonacci(0)의 결과를 얻고, 1을 리턴한다.&lt;/p&gt;

&lt;p&gt;첫 번째 호출한 fibonacci(1)은 1을 출력하고, 1을 리턴한다.&lt;/p&gt;

&lt;p&gt;fibonacci(3)은 fibonacci(2)와 fibonacci(1)의 결과를 얻고, 2를 리턴한다.&lt;/p&gt;

&lt;p&gt;이 때, 1은 2번 출력되고, 0은 1번 출력된다. N이 주어졌을 때, fibonacci(N)을 호출했을 때, 0과 1이 각각 몇 번 출력되는지 구하는 프로그램을 작성하시오.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;입력&quot;&gt;입력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 다음과 같이 구성되어있다.&lt;/p&gt;

&lt;p&gt;첫째 줄에 N이 주어진다. N은 40보다 작거나 같은 자연수 또는 0이다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;출력&quot;&gt;출력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
각 테스트 케이스마다 0이 출력되는 횟수와 1이 출력되는 횟수를 공백으로 구분해서 출력한다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;함수를 보면 재귀호출로 n-1,n-2의 값을 호출한다. 그 말의 의미는 그 전 값들을 이용하면 재귀 호출 없이 그것들을 알 수 있게 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이는 DP에서 Bottom-Up 방식으로 데이터를 하나하나 차곡차곡 쌓으면 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;코드&quot;&gt;코드&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
using namespace std;
int dp[41][2];
int main() {
	int T;
	cin &amp;gt;&amp;gt; T;
	int *arr = new int[T];
	for (int i = 0; i &amp;lt; T; i++)
	{
		cin &amp;gt;&amp;gt; arr[i];
	}

	dp[0][0] = 1; dp[0][1] = 0;
	dp[1][0] = 0; dp[1][1] = 1;
	
	for (int i = 2; i &amp;lt;= 40; i++)
	{
		for (int j = 0; j &amp;lt; 2; j++)
			dp[i][j] = dp[i - 1][j] + dp[i - 2][j];
	}

	for (int i = 0; i &amp;lt; T; i++)
	{
		for (int j = 0; j &amp;lt; 2; j++)
			cout &amp;lt;&amp;lt; dp[arr[i]][j] &amp;lt;&amp;lt; &quot; &quot;;
		cout &amp;lt;&amp;lt; endl;
	}
}	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">문제</summary></entry><entry><title type="html">BOJ 3613 Java vs C++</title><link href="http://localhost:4000/posts/2017/11/30/BOJ3613.html" rel="alternate" type="text/html" title="BOJ 3613 Java vs C++" /><published>2017-11-30T10:00:00+09:00</published><updated>2017-11-30T10:00:00+09:00</updated><id>http://localhost:4000/posts/2017/11/30/BOJ3613</id><content type="html" xml:base="http://localhost:4000/posts/2017/11/30/BOJ3613.html">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/3613&quot;&gt;문제&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;
Java 예찬론자 김동규와 C++ 옹호가 김동혁은 서로 어떤 프로그래밍 언어가 최고인지 몇 시간동안 토론을 하곤 했다. 동규는 Java가 명확하고 에러가 적은 프로그램을 만든다고 주장했고, 동혁이는 Java는 프로그램이 느리고, 긴 소스 코드를 갖는 점과 제네릭 배열의 인스턴스화의 무능력을 비웃었다.&lt;/p&gt;

&lt;p&gt;또, 김동규와 김동혁은 변수 이름을 짓는 방식도 서로 달랐다. Java에서는 변수의 이름이 여러 단어로 이루어져있을 때, 다음과 같은 방법으로 변수명을 짓는다.&lt;/p&gt;

&lt;p&gt;첫 단어는 소문자로 쓰고, 다음 단어부터는 첫 문자만 대문자로 쓴다. 또, 모든 단어는 붙여쓴다. 따라서 Java의 변수명은 javaIdentifier, longAndMnemonicIdentifier, name, bAEKJOON과 같은 형태이다.&lt;/p&gt;

&lt;p&gt;반면에 C++에서는 변수명에 소문자만 사용한다. 단어와 단어를 구분하기 위해서 밑줄(‘_‘)을 이용한다. C++ 변수명은 c_identifier, long_and_mnemonic_identifier, name, b_a_e_k_j_o_o_n과 같은 형태이다.&lt;/p&gt;

&lt;p&gt;이 둘의 싸움을 부질없다고 느낀 재원이는 C++형식의 변수명을 Java형식의 변수명으로, 또는 그 반대로 바꿔주는 프로그램을 만드려고 한다. 각 언어의 변수명 형식의 위의 설명을 따라야 한다.&lt;/p&gt;

&lt;p&gt;재원이의 프로그램은 가장 먼저 변수명을 입력으로 받은 뒤, 이 변수명이 어떤 언어 형식인지를 알아내야 한다. 그 다음, C++형식이라면 Java형식으로, Java형식이라면 C++형식으로 바꾸면 된다. 만약 C++형식과 Java형식 둘 다 아니라면, 에러를 발생시킨다. 변수명을 변환할 때, 단어의 순서는 유지되어야 한다.&lt;/p&gt;

&lt;p&gt;재원이는 프로그램을 만드려고 했으나, 너무 귀찮은 나머지 이를 문제를 읽는 사람의 몫으로 맡겨놨다.&lt;/p&gt;

&lt;p&gt;재원이가 만드려고 한 프로그램을 대신 만들어보자.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;입력&quot;&gt;입력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
첫째 줄에 변수명이 주어진다. 영어 알파벳과 밑줄(‘_‘)로만 이루어져 있고, 길이는 100을 넘지 않는다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;출력&quot;&gt;출력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
입력으로 주어진 변수명이 Java형식이면, C++형식으로 출력하고, C++형식이라면 Java형식으로 출력한다. 둘 다 아니라면 “Error!”를 출력한다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;String을 C++로 처리하는 건 자바보다 불편하다고 하지만 해봤다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Java 케이스는 맨 앞에 대문자가 들어가지 않는 대소 문자로 이루어진 케이스이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;C++ 케이스는 맨 앞과 맨뒤에 ‘&lt;em&gt;‘가 들어가지 않는 ‘&lt;/em&gt;‘와 소문자로 이루어진 케이스이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;엄청 여러번 제출하게 되었는데 그 이유는 ‘_‘가 두번 연속으로 나오는 케이스는 Error이기 때문이다. Java 케이스의 경우 연속적으로 대문자가 두번 나와도 가능하다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;코드&quot;&gt;코드&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;string&amp;gt;
#include &amp;lt;iostream&amp;gt;

using namespace std;

int main(){
  string input_data;
  cin &amp;gt;&amp;gt; input_data;

  int input_data_size = input_data.length();
  int flags= 0;

  if (input_data.find(&quot;_&quot;) != -1) {
      flags=1;
  }


  int flags_=0;
  string result=&quot;&quot;;
  int temp_int = 'a' - 'A';
  int temp_int2 = 'A' - 'a';

  for(int i =0;i&amp;lt;input_data_size;i++){

    char temp_char = input_data.at(i);

	if (((i == 0 || i == input_data_size-1) &amp;amp;&amp;amp; (temp_char == '_'))|| (i==0 &amp;amp;&amp;amp; temp_char &amp;gt;= 'A' &amp;amp;&amp;amp; temp_char &amp;lt;= 'Z')) {
		result = &quot;Error!&quot;;
		break;
	}
	
    if(temp_char &amp;gt;= 'a' &amp;amp;&amp;amp; temp_char &amp;lt;= 'z'){
      if(flags_ == 1){
        temp_char += temp_int2;
        flags_=0;
      }
        result += temp_char;
    }
    else if(temp_char &amp;gt;= 'A' &amp;amp;&amp;amp; temp_char &amp;lt;= 'Z'){
      if(flags == 0){
		  temp_char += temp_int;
		  result += '_';
		  result += temp_char;
      }else {
		result = &quot;Error!&quot;;
        break;
      }
    }else if(flags==1){
      if(temp_char=='_' &amp;amp;&amp;amp; flags_ ==0){
		  flags_ = 1;
	  }else {
		  result = &quot;Error!&quot;;
		  break;
      }
	}
  }

  cout&amp;lt;&amp;lt;result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">문제</summary></entry><entry><title type="html">BOJ 2579 계단 오르기</title><link href="http://localhost:4000/posts/2017/11/29/BOJ2579.html" rel="alternate" type="text/html" title="BOJ 2579  계단 오르기" /><published>2017-11-29T14:58:00+09:00</published><updated>2017-11-29T14:58:00+09:00</updated><id>http://localhost:4000/posts/2017/11/29/BOJ2579</id><content type="html" xml:base="http://localhost:4000/posts/2017/11/29/BOJ2579.html">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2579&quot;&gt;문제&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;
계단 오르기 게임은 계단 아래 시작점부터 계단 꼭대기에 위치한 도착점까지 가는 게임이다. &amp;lt;그림 1&amp;gt;과 같이 각각의 계단에는 일정한 점수가 쓰여 있는데 계단을 밟으면 그 계단에 쓰여 있는 점수를 얻게 된다.&lt;/p&gt;

&lt;p&gt;예를 들어 &amp;lt;그림 2&amp;gt;와 같이 시작점에서부터 첫 번째, 두 번째, 네 번째, 여섯 번째, 계단을 밟아 도착점에 도달하면 총 점수는 10 + 20 + 25 + 20 = 75점이 된다.&lt;/p&gt;

&lt;p&gt;계단 오르는 데는 다음과 같은 규칙이 있다.&lt;/p&gt;

&lt;p&gt;계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다. 즉, 한 계단을 밟으면서 이어서 다음 계단이나, 다음 다음 계단으로 오를 수 있다.
연속된 세 개의 계단을 모두 밟아서는 안된다. 단, 시작점은 계단에 포함되지 않는다.
마지막 도착 계단은 반드시 밟아야 한다.
따라서 첫 번째 계단을 밟고 이어 두 번째 계단이나, 세 번째 계단으로 오를 수 있다. 하지만, 첫 번째 계단을 밟고 이어 네 번째 계단으로 올라가거나, 첫 번째, 두 번째, 세번째 계단을 연속해서 모두 밟을 수는 없다.&lt;/p&gt;

&lt;p&gt;각 계단에 쓰여 있는 점수가 주어질 때 이 게임에서 얻을 수 있는 총 점수의 최대값을 구하는 프로그램을 작성하시오.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;입력&quot;&gt;입력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
입력의 첫째 줄에 계단의 개수가 주어진다.&lt;/p&gt;

&lt;p&gt;둘째 줄부터 한 줄에 하나씩 제일 아래에 놓인 계단부터 순서대로 각 계단에 쓰여 있는 점수가 주어진다. 계단의 개수는 300이하의 자연수이고, 계단에 쓰여 있는 점수는 10,000이하의 자연수이다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;출력&quot;&gt;출력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
첫째 줄에 계단 오르기 게임에서 얻을 수 있는 총 점수의 최대값을 출력한다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;앞서 포스팅한 2156번 포도주 시식 문제와 매우 유사하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다른 점은 포도주 시식의 경우 최대값을 위해서는 연속해서 2잔 이상을 마시지 않아도 되지만 계단 오르기의 경우 한잔만 건너뛸 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;각 위치의 계단은 세가지의 경우를 가진다.
0 = 밟지 않는다. (아래의 계단을 밟았어야한다.)
1 = 아래의 계단은 밟지않고, 이번 계단만 밟는다. (즉, 2계단 위를 밟았다.)
2 = 아래의 계단을 밟고, 이번 계단도 밟는다. (즉, 1계단 위를 밟는다.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위의 세가지 경우를 데이터에 저장하고, 이를 이용하여 최대값을 구하면 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;코드&quot;&gt;코드&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

int dp[301][3];
int stairs[301];

int main(){
  int n;
  cin&amp;gt;&amp;gt;n;
  for(int i =1;i&amp;lt;=n;i++)
    cin&amp;gt;&amp;gt;stairs[i];

  for(int i=1;i&amp;lt;n;i++){
    dp[i][0] = max(dp[i-1][1],dp[i-1][2]); // i 위치는 밟지 않는 경우 //한 계단 or 두 계단 전은 밟아야함
    dp[i][1] = dp[i-1][0]+stairs[i]; //밟는 경우 중 연속 계수가 1
    dp[i][2] = dp[i-1][1]+stairs[i]; // 밟는 경우 중 연속 계수가 2
  }
  int result =  max(dp[n-1][1],dp[n-1][0]) + stairs[n];
  cout&amp;lt;&amp;lt;result&amp;lt;&amp;lt;&quot;\n&quot;;

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">문제</summary></entry><entry><title type="html">BOJ 2156 포도주 시식</title><link href="http://localhost:4000/posts/2017/11/29/BOJ2156.html" rel="alternate" type="text/html" title="BOJ 2156 포도주 시식" /><published>2017-11-29T14:51:00+09:00</published><updated>2017-11-29T14:51:00+09:00</updated><id>http://localhost:4000/posts/2017/11/29/BOJ2156</id><content type="html" xml:base="http://localhost:4000/posts/2017/11/29/BOJ2156.html">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2156&quot;&gt;문제&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;
효주는 포도주 시식회에 갔다. 그 곳에 갔더니, 테이블 위에 다양한 포도주가 들어있는 포도주 잔이 일렬로 놓여 있었다. 효주는 포도주 시식을 하려고 하는데, 여기에는 다음과 같은 두 가지 규칙이 있다.&lt;/p&gt;

&lt;p&gt;포도주 잔을 선택하면 그 잔에 들어있는 포도주는 모두 마셔야 하고, 마신 후에는 원래 위치에 다시 놓아야 한다.
연속으로 놓여 있는 3잔을 모두 마실 수는 없다.
효주는 될 수 있는 대로 많은 양의 포도주를 맛보기 위해서 어떤 포도주 잔을 선택해야 할지 고민하고 있다. 1부터 n까지의 번호가 붙어 있는 n개의 포도주 잔이 순서대로 테이블 위에 놓여 있고, 각 포도주 잔에 들어있는 포도주의 양이 주어졌을 때, 효주를 도와 가장 많은 양의 포도주를 마실 수 있도록 하는 프로그램을 작성하시오.&lt;/p&gt;

&lt;p&gt;예를 들어 6개의 포도주 잔이 있고, 각각의 잔에 순서대로 6, 10, 13, 9, 8, 1 만큼의 포도주가 들어 있을 때, 첫 번째, 두 번째, 네 번째, 다섯 번째 포도주 잔을 선택하면 총 포도주 양이 33으로 최대로 마실 수 있다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;입력&quot;&gt;입력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
첫째 줄에 포도주 잔의 개수 n이 주어진다. (1≤n≤10,000) 둘째 줄부터 n+1번째 줄까지 포도주 잔에 들어있는 포도주의 양이 순서대로 주어진다. 포도주의 양은 1,000 이하의 음이 아닌 정수이다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;출력&quot;&gt;출력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
첫째 줄에 최대로 마실 수 있는 포도주의 양을 출력한다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;n에 들어 올 수 잇는 수는 1&amp;lt;=n&amp;lt;=10,000 이개 때문에 O(n^2)으로 할 경우에 시간 초과가 발생한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그렇다면 포도주를 마시면서 그것의 대한 값을 데이터 저정해야한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;각 위치의 포도주는 세가지의 경우를 가진다. 0 = 마시지 않는다.
1 = 바로 왼쪽 옆 잔은 마시지 않았으나 이번 잔은 마신다.
2 = 바로 왼쪽 옆 잔도 마셨고, 이번 잔도 마신다 (단,왼쪽으로 두번째 옆 잔은 마시지 않았다.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위의 세가지 경우를 데이터에 저장하고, 이를 이용하여 최대값을 구하면 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;코드&quot;&gt;코드&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
using namespace std;

int dp[10001][4];
int wine_data[10001];

int main(){
	int wine_count;
	cin&amp;gt;&amp;gt;wine_count;
	for(int i=1;i&amp;lt;=wine_count;i++)
		cin&amp;gt;&amp;gt;wine_data[i];
	for(int i=1;i&amp;lt;=wine_count;i++){
		dp[i][0]= dp[i-1][3];
		dp[i][1]= dp[i-1][0]+wine_data[i];
		dp[i][2]= dp[i-1][1]+wine_data[i];
		dp[i][3]= max(dp[i][0],max(dp[i][1],dp[i][2]));
	}

	cout&amp;lt;&amp;lt;dp[wine_count][3]&amp;lt;&amp;lt;&quot;\n&quot;;

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">문제</summary></entry><entry><title type="html">BOJ 9095 1,2,3 더하기</title><link href="http://localhost:4000/posts/2017/11/28/BOJ9095.html" rel="alternate" type="text/html" title="BOJ 9095 1,2,3 더하기" /><published>2017-11-28T07:51:00+09:00</published><updated>2017-11-28T07:51:00+09:00</updated><id>http://localhost:4000/posts/2017/11/28/BOJ9095</id><content type="html" xml:base="http://localhost:4000/posts/2017/11/28/BOJ9095.html">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/9095&quot;&gt;문제&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
정수 4를 1, 2, 3의 조합으로 나타내는 방법은 총 7가지가 있다.&lt;/p&gt;

&lt;p&gt;1+1+1+1
1+1+2
1+2+1
2+1+1
2+2
1+3
3+1
정수 n이 주어졌을 때, n을 1,2,3의 합으로 나타내는 방법의 수를 구하는 프로그램을 작성하시오.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;입력&quot;&gt;입력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
첫쨰 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고, 정수 n이 주어진다. n은 양수이며 11보다 작다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;출력&quot;&gt;출력&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
각 테스트 케이스마다, n을 1,2,3의 합으로 나타내는 방법의 수를 출력한다.
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;1,2,3을 이용하여 1~11 가지의 숫자의 경우의 수를 구하는 것이다. 여기서 포인트는 무엇보다 숫자에 순서가 중요하다는 것이다. 그것을 이용하면 쉽게 문제를 해결할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예로 나와있듯이 4를 구성하는 경우는 총 7가지가 존재한다.
이것을 보면 3을 구성하는 경우의수와 2를 구성하는 경우의 수와 1을 구성하는 경우의 수를 더한 값과 같다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;코드&quot;&gt;코드&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;

using namespace std;
int dp[11];
int num[3]={1,2,3};

int main(){
  dp[0] = 0;

  int n;
  cin &amp;gt;&amp;gt;n;

  for(int i=1;i&amp;lt;11;i++){
    for(int j=0;j&amp;lt;3;j++){
      if( i - num[j] &amp;gt;= 1){
        dp[i]+= dp[i-num[j]];
      }
      if(num[j]==i){
        dp[i]+=1;
      }
    }
  }
  for (int i = 0; i &amp;lt; n; i++) {
	  int temp;
	  cin &amp;gt;&amp;gt; temp;
	  cout &amp;lt;&amp;lt; dp[temp] &amp;lt;&amp;lt; &quot;\n&quot;;
  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">문제 정수 4를 1, 2, 3의 조합으로 나타내는 방법은 총 7가지가 있다.</summary></entry></feed>